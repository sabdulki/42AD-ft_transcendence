#!/usr/bin/env bash

# –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ bash
if [ -z "$BASH_VERSION" ]; then
  echo "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ bash: bash init-fastify-project.sh"
  exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ CRLF
if file "$0" | grep -q CRLF; then
  echo "‚ùå –§–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Windows (CRLF) –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫."
  echo "   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –≤ Unix (LF). –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–ø–æ–ª–Ω–∏:"
  echo "   sed -i 's/\r\$//' $0"
  exit 1
fi

read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞: " PROJECT_NAME

if [ -z "$PROJECT_NAME" ]; then
  echo "‚ùå –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!"
  exit 1
fi

mkdir "$PROJECT_NAME"
cd "$PROJECT_NAME" || exit

echo "üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ '$PROJECT_NAME'..."
npm init -y

echo "üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
npm install fastify sqlite3
npm install -D typescript ts-node @types/node @types/sqlite3

echo "üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ TypeScript..."
npx tsc --init --rootDir src --outDir dist --esModuleInterop --resolveJsonModule --lib ES2021 --module commonjs --target ES2021

echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫..."
mkdir -p src/api/rest/handlers
mkdir -p src/domain
mkdir -p src/infrastructure
mkdir -p src/pkg/handler
mkdir -p src/pkg/storage
mkdir -p src/infrastructure/storage

# src/pkg/handler/handler.ts
cat <<EOL > src/pkg/handler/handler.ts
import { RouteHandlerMethod } from 'fastify'

export interface IHandler {
  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH'
  route: string
  handler: RouteHandlerMethod
}
EOL

# src/pkg/storage/storage.ts
cat <<EOL > src/pkg/storage/storage.ts
export interface IStorage {
  testRequestToDB(): Promise<string>
}
EOL

# src/infrastructure/storage/storage.ts
cat <<EOL > src/infrastructure/storage/storage.ts
import { IStorage } from '../../pkg/storage/storage'

export class Storage implements IStorage {
  async testRequestToDB(): Promise<string> {
    // –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
    return 'connected to database'
  }
}
EOL

# src/api/rest/handlers/ping.ts
cat <<EOL > src/api/rest/handlers/ping.ts
import { FastifyRequest, FastifyReply } from 'fastify'
import { Storage } from '../../../infrastructure/storage/storage'

export async function pingHandler(request: FastifyRequest, reply: FastifyReply) {
  const storage = new Storage()
  const result = await storage.testRequestToDB()
  return { pong: result }
}
EOL

# src/api/rest/rest.ts
cat <<EOL > src/api/rest/rest.ts
import { FastifyInstance } from 'fastify'
import { IHandler } from '../../pkg/handler/handler'
import { pingHandler } from './handlers/ping'

const routes: IHandler[] = [
  {
    method: 'GET',
    route: '/ping',
    handler: pingHandler
  }
]

export async function registerRestRoutes(app: FastifyInstance) {
  for (const route of routes) {
    app.route({
      method: route.method,
      url: route.route,
      handler: route.handler
    })
  }
}
EOL

# src/app.ts
cat <<EOL > src/app.ts
import Fastify from 'fastify'
import { registerRestRoutes } from './api/rest/rest'

const app = Fastify()

async function main() {
  await registerRestRoutes(app)

  app.listen({ port: 3000 }, (err, address) => {
    if (err) {
      app.log.error(err)
      process.exit(1)
    }
    console.log("Server listening at " + address)
  })
}

main()
EOL

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞
npx npm-add-script -k "dev" -v "ts-node src/app.ts"

echo "‚úÖ –ü—Ä–æ–µ–∫—Ç '$PROJECT_NAME' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
echo "üëâ –ü–µ—Ä–µ–π–¥–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∑–∞–ø—É—Å—Ç–∏: cd $PROJECT_NAME && npm run dev"
