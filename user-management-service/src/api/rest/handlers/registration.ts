import { FastifyRequest, FastifyReply } from 'fastify'
import { Storage } from '../../../infrastructure/storage/storage'
import bcrypt from 'bcryptjs'
// import '../../../typos/fastify' // üëà –î–æ–±–∞–≤—å —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ


interface RegisterBody {
  name: string
  email: string
  password: string
}
// <{ Body: RegisterBody }>

export async function registrationHandler(request: FastifyRequest, reply: FastifyReply) 
{
  const { name, email, password } = request.body as RegisterBody

  // –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ö–µ–º—ã JSON Schema –∏–ª–∏ zod –ø–æ–∑–∂–µ)
  if (!name || !email || !password) {
    return reply.code(400).send({ error: 'Missing name, email or password' })
  }

  // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
  const hashedPassword = bcrypt.hashSync(password, 10)

  // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ fastify.sqlite
  // const db = request.server.sqlite
  const db = (request.server as any).sqlite_users


  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É
    const stmt = db.prepare('INSERT INTO users (username, email, password) VALUES (?, ?, ?)')
    stmt.run(name, email, hashedPassword)
    // call function wich will create new row in table users_ratings, connected to user_id
    return reply.code(201).send({ message: 'User registered successfully' })
  } catch (err: any) {
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –µ—Å—Ç—å
    return reply.code(400).send({ error: 'User already exists or invalid data', detail: err.message })
  }
}
